"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = void 0;
const winston_1 = require("winston");
const winston_transport_1 = __importDefault(require("winston-transport"));
const node_fetch_1 = require("node-fetch");
class FingersCrossedTransport extends winston_transport_1.default {
    constructor(decoratedTransport, options) {
        super(options);
        this.reset();
        this.logLevel = process.env.FINGERS_CROSSED_LOG_LEVEL || 'info';
        if (decoratedTransport.log === undefined) {
            throw new Error('transport has no log method');
        }
        this.decoratedTransport = decoratedTransport;
    }
    log(info, next) {
        setImmediate(() => {
            this.emit('logged', info);
        });
        if (!this.loggingEnabled && info[Symbol.for('level')] !== this.logLevel) {
            this.infoStore.push(info);
            next();
            return;
        }
        this.loggingEnabled = true;
        this.infoStore.forEach((infoStoreObject) => {
            if (this.decoratedTransport.log !== undefined) {
                // tslint:disable-next-line:no-empty
                this.decoratedTransport.log(infoStoreObject, () => { });
            }
        });
        this.infoStore = [];
        if (this.decoratedTransport.log !== undefined) {
            this.decoratedTransport.log(info, next);
        }
    }
    reset() {
        this.infoStore = [];
        this.loggingEnabled = false;
    }
}
const handleResponse = winston_1.format((info, opts) => {
    const splat = Symbol.for('splat');
    // @ts-ignore
    const obj = info[splat];
    if (Array.isArray(obj)) {
        // @ts-ignore
        info[splat] = obj.map((object) => {
            if (object instanceof node_fetch_1.Response) {
                return {
                    body: object.buffer(),
                    status: object.status,
                };
            }
            return object;
        });
    }
    return info;
});
const transport = new FingersCrossedTransport(new winston_1.transports.Console());
const DEFAULT_LOGGER_CONFIG = {
    level: process.env.LOG_LEVEL || 'info',
    format: winston_1.format.combine(handleResponse(), winston_1.format.colorize(), winston_1.format.timestamp({
        format: 'YYYY-MM-DD HH:mm:ss',
    }), winston_1.format.errors({ stack: true }), winston_1.format.splat(), winston_1.format.json()),
    transports: [transport],
};
exports.logger = winston_1.createLogger(DEFAULT_LOGGER_CONFIG);
